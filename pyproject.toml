[project]
name = "docling-japanese-books"
version = "0.1.0"
description = "Document processing pipeline using Docling for Japanese books and LLM training data preparation"
authors = [
    {name = "Juga Paazmaya", email = "paazmaya@yahoo.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["docling", "document-processing", "llm", "training-data"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    "docling>=2.0.0",
    "docling-core>=1.0.0",
    "pymilvus[milvus-lite]>=2.4.0",
    "click>=8.1.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "sentence-transformers>=2.2.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pathlib-mate>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

vision = [
    "opencv-python>=4.8.0",
    "pillow>=10.0.0",
    "requests>=2.31.0",
    "docling[vlm]>=2.0.0",
]

databases = [
    "pymongo>=4.5.0",
    "redis>=5.0.0",
    "chromadb>=0.4.0",
    "qdrant-client>=1.6.0",
]

all = [
    "docling-japanese-books[dev,vision,databases]"
]

[project.scripts]
docling-process = "docling_japanese_books.cli:main"
docling-search = "docling_japanese_books.query:search"
docling-stats = "docling_japanese_books.query:stats"

[project.urls]
Homepage = "https://github.com/yourusername/docling-japanese-books"
Repository = "https://github.com/yourusername/docling-japanese-books.git"
Documentation = "https://github.com/yourusername/docling-japanese-books#readme"
"Bug Tracker" = "https://github.com/yourusername/docling-japanese-books/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.gitignore",
    "/.pre-commit-config.yaml",
]

[tool.hatch.build.targets.wheel]
packages = ["src/docling_japanese_books"]

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]",
    "pytest",
    "pytest-cov",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "FBT"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "docling.*",
    "transformers.*",
    "sentence_transformers.*",
    "torch.*",
    "cv2.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/docling_japanese_books",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = [
    "ruff>=0.14.1",
]
